module core;

# A sequence is a collection of values with a meaningful and consistent
# order. This could be insertion order, natural order, or anything else.

public abstract type Sequence[+T] extends Collection[T] {
  public Sequence[T] +(Sequence[T] that) {
    List[T] l = EmptyList();
    foreach (T elem in this)
      l = new NonEmptyList[T](elem, l);
    foreach (T elem in that)
      l = new NonEmptyList[T](elem, l);
    return l.reverse();
  }

  # The index a is inclusive, while b is exclusive.
  # Fails if b >= size().
  public Sequence[T] subsequence(Int a, Int b) {
    # TODO: implement this
  }

  public T get(Int index) {
    Source[T] enum = this.enumerator();
    repeat (index)
      enum.take();
    return enum.take().get();
  }

  public T getFront() {
    return this(0);
  }

  public T getBack() {
    return this(this.size() - 1);
  }

  # Undefined behavior if l > size().
  public Sequence[T] getFront(Int l) {
  }

  # Undefined behavior if l > size().
  public Sequence[T] getBack(Int l) {
  }

  public Bool startsWith(Sequence[T] s) {
    if (this.size() < s.size())
      return false;
    return this.getFront(s.size()) == s;
  }

  public Bool endsWith(Sequence[T] s) {
    if (this.size() < s.size())
      return false;
    return this.getBack(s.size()) == s;
  }

  # Return the index of the first occurrence of subsequence, beginning at some specified index.
  # Returns -1 if the subsequence is not found.
  public Int indexOf(Sequence[T] subseq, Int start) {
    for (Int i = 0; i <= this.size() - subseq.size(); i = i + 1)
      if (this.subsequence(i, i + subseq.size()) == subseq)
        return i;
    return -1;
  }

  public Int indexOf(Sequence[T] subseq) {
    return this.indexOf(subseq, 0);
  }

  public Int indexOf(T value, Int start) {
    return this.indexOf({value}, start);
  }

  public Int indexOf(T value) {
    return this.indexOf({value}, 0);
  }

  public Sequence[T] reverse() {
    MutableDeque[T] deque = new ArrayDeque[T]();
    foreach (T elem in this)
      deque.pushFront(elem);
    return deque;
  }

  # Repeat this sequence k times.
  public Sequence[T] *(Int k) {
    if (k < 0)
      1 / 0; # fail
    List[T] l = EmptyList();
    for (Int i = 0; i < k; i = i + 1)
      foreach (T elem in this)
        l = new NonEmptyList[T](elem, l);
    return l.reverse();
  }

  public Sequence[T] map(Function1[T, T] f) {
  }

  public Sequence[T] replace(T a, T b) {
  }

  public Sequence[T] replace(Sequence[T] a, Sequence[T] b) {
  }

  public ImmutableSequence[T] toImmutable() {
    return new ImmutableArray[T](this);
  }

  public Bool ==(Top o) {
  }

  public Int hashCode() {
  }

  public String toString() {
    return "{" + ", ".join(this) + "}";
  }
}

# Most mutable sequences support various types of insertion operations,
# but the only operation they have in common is replacing the i'th element.
# Note that things like mutable ordered maps don't support this, but I think
# it makes sense to have them extend regular Sequence and not MutableSequence.
# Those are mutable structures, but "mutable sequence" has a more specific
# meaning here than "a sequence which also has some mutation operation".
public abstract type MutableSequence[T] extends Sequence[T] {
  T set(Int index, T value);
}

public abstract type ImmutableSequence[+T] extends Sequence[T] {
  # TODO: A method like this makes sense, but needs a name that
  # doesn't conflict with ImmutableMap.with(k, v).

  #ImmutableSequence[T] with(Int index, T value) {
  #}

  public ImmutableSequence[T] toImmutable() {
    return this;
  }
}

public type SequenceSerializer[T] extends Serializer[Sequence[T]] {
  private readonly Serializer[T] elementSerializer;

  public Unit init(Serializer[T] elementSerializer) {
    this.elementSerializer = elementSerializer;
  }

  public Sequence[Byte] serialize(Sequence[T] seq) {
    MutableStack[Byte] bytes = new DynamicArray[Byte]();

    foreach (T elem in seq) {
      Sequence[Byte] elemBytes = this.elementSerializer.serialize(elem);
      Sequence[Byte] sizeBytes = BigEndianIntSerializer().serialize(elemBytes.size());
      # Write the length of this element's data, followed by the data itself.
      bytes.pushBackAll(sizeBytes);
      bytes.pushBackAll(elemBytes);
    }

    return bytes;
  }

  public Sequence[T] deserialize(Sequence[Byte] bytes) {
    MutableStack[T] seq = new DynamicArray[T]();
    Int pos = 0;

    # Read each element.
    while (pos < bytes.size()) {
      # Read the size of this element.
      Sequence[Byte] sizeBytes = bytes.subsequence(pos, pos + 4);
      Int size = BigEndianIntSerializer().deserialize(sizeBytes);
      pos = pos + 4;

      # Read the element itself.
      Sequence[Byte] elemBytes = bytes.subsequence(pos, pos + size);
      seq.pushBack(this.elementSerializer.deserialize(elemBytes));
      pos = pos + size;
    }

    return seq;
  }
}
