module core;

public abstract type Source[+T] {
  public Maybe[T] take();
}

public sealed type EmptySource extends Source[Bottom] {
  private static readonly EmptySource singleton;

  private Unit init() {}

  private static Unit init() {
    EmptySource.singleton = new EmptySource();
  }

  public static EmptySource get() {
    return EmptySource.singleton;
  }

  public None take() {
    return None();
  }
}

public sealed type SingletonSource[+T] extends Source[T] {
  private readonly T value;
  private Bool used;

  public Maybe[T] take() {
    if (this.used)
      return None();
    this.used = true;
    return value;
  }
}

public abstract type InfiniteSource[+T] extends Source[T] {
  public Some[T] maybeTake();
}

public sealed type RandomAccessEnumerator[+T] extends Source[T] {
  private readonly Sequence[T] seq;
  private Int index;

  public Void init(Sequence[t] seq) {
    this.seq = seq;
  }

  public Maybe[T] take() {
    if (this.index >= seq.size())
      return None();
    T result = this.seq(index);
    index = index + 1;
    return result;
  }
}
