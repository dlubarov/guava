module core;

abstract type Maybe[+T] extends Iterable[T] {
  Bool isSomething();
  Bool isNothing();

  T get();

  T getOr(T default);
}

type Some[+T] extends Maybe[T] {
  T value;

  Void init(T value) {
    this.value = value;
  }

  static Some[T] get[T](T value) {
    return new Some[T](value);
  }

  Bool isSomething() {
    return true;
  }

  Bool isNothing() {
    return false;
  }

  T get() {
    return this.value;
  }

  T getOr(T default) {
    return this.value;
  }

  Iterator[T] iterator() {
    return new SingletonIterator[T](this.value);
  }

  String toString() {
    return "Some(" + this.value.toString() + ")";
  }
}

type None[+T] extends Maybe[T] {
  Void init() {}

  static None[U] get[U]() {
    return new None[U]();
  }

  Bool isSomething() {
    return false;
  }

  Bool isNothing() {
    return true;
  }

  T get() {}

  T getOr(T default) {
    return default;
  }

  Iterator[T] iterator() {
    return new EmptyIterator[T]();
  }

  String toString() {
    return "None";
  }
}
