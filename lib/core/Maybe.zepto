module core;

public abstract type Maybe[+T] extends Collection[T] {
  public T get();

  [U > T]
  public U getOr[U](U default);
}

public sealed type Some[+T] extends Maybe[T] {
  public readonly T value;

  public Unit init(T value) {
    this.value = value;
  }

  public T get() {
    return this.value;
  }

  [U > T]
  public U getOr[U](U default) {
    return this.value;
  }

  public Source[T] enumerator() {
    return new SingletonSource[T](this.value);
  }

  public Bool ==(Top o) {
    # TODO: switch on o
  }

  public Int hashCode() {
    return this.value.hashCode();
  }

  public String toString() {
    return "Some(%s)".format({this.value});
  }
}

public sealed type None extends Maybe[Bottom] {
  private static readonly None singleton;

  private Unit init() {}

  private static Unit init() {
    None.singleton = new None();
  }

  public static None get() {
    return None.singleton;
  }

  public Bottom get() {
  }

  [U > Bottom]
  public U getOr[U](U default) {
    return default;
  }

  public Source[Bottom] enumerator() {
    return EmptySource();
  }

  public String toString() {
    return "None";
  }
}
