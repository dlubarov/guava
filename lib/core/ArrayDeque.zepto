module core;

public type ArrayDeque[T] extends MutableDeque[T] {
  private CircularBuffer backingBuffer;

  public Int size() {
    return backingBuffer.size();
  }

  public T get(Int index) {
    return backingBuffer(index);
  }

  public T set(Int index, T value) {
    return backingBuffer(index) = value;
  }

  private Bool atCapacity() {
    return this.size() == this.backingBuffer.capacity();
  }

  private Bool wayUnderCapacity() {
    return this.capacity() > 10 && this.size() * 4 < this.capacity();
  }

  private Unit resize(Int newCapacity) {
    this.backingBuffer = new CircularBuffer[T](newCapacity, this.backingBuffer);
  }

  private Unit expand() {
    this.resize(this.capacity() * 2);
  }

  private Unit shrink() {
    this.resize(this.capacity() / 2);
  }

  public Unit pushFront(T value) {
    if (this.atCapacity())
      this.expand();
    this.backingBuffer.pushFront(value);
  }

  public Unit pushBack(T value) {
    if (this.atCapacity())
      this.expand();
    this.backingBuffer.pushBack(value);
  }

  public T popFront() {
    T result = this.backingBuffer.popBack();
    if (this.wayUnderCapacity())
      this.shrink();
    return result;
  }

  public T popBack() {
    T result = this.backingBuffer.popBack();
    if (this.wayUnderCapacity())
      this.shrink();
    return result;
  }
}
