module core;

public abstract type Source[+T] {
  public Maybe[T] take();

  public Sequence[T] takeUpTo(Int n) {
    MutableStack[T] stack = new DynamicArray[T]();
    if (n <= 0)
      return stack;
    Maybe[T] elem = this.take();
    while (stack.size() < n & !elem.isEmpty()) {
      stack.pushBack(elem.get());
      elem = this.take();
    }
    return stack;
  }

  # Read all data from this source.
  public Sequence[T] takeAll() {
    MutableStack[T] stack = new DynamicArray[T]();
    Maybe[T] elem = this.take();
    while (!elem.isEmpty()) {
      stack.pushBack(elem.get());
      elem = this.take();
    }
    return stack;
  }
}

public sealed type EmptySource extends Source[Bottom] {
  private static readonly EmptySource singleton;

  private Unit init() {}

  private static Unit init() {
    EmptySource.singleton = new EmptySource();
  }

  public static EmptySource get() {
    return EmptySource.singleton;
  }

  public None take() {
    return None();
  }
}

public sealed type SingletonSource[+T] extends Source[T] {
  private readonly T value;
  private Bool used;

  public Unit init(T value) {
    this.value = value;
  }

  public Maybe[T] take() {
    if (this.used)
      return None();
    this.used = true;
    return new Some[T](this.value);
  }
}

public abstract type InfiniteSource[+T] extends Source[T] {
  public Some[T] take();

  public Bottom takeAll() {
    1 / 0; # fail
  }
}

public sealed type RandomAccessEnumerator[+T] extends Source[T] {
  private readonly Sequence[T] seq;
  private Int index;

  public Unit init(Sequence[T] seq) {
    this.seq = seq;
    this.index = 0;
  }

  public Maybe[T] take() {
    if (this.index >= this.seq.size())
      return None();
    T result = this.seq(this.index);
    this.index = this.index + 1;
    return new Some[T](result);
  }
}
