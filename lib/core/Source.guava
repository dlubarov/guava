module core;

public abstract type Source[+T] {
  public Maybe[T] tryTake();

  public Sequence[T] takeUpTo(Int n) {
    MutableStack[T] stack = new DynamicArray[T]();
    if (n <= 0)
      return stack;
    Maybe[T] elem = this.tryTake();
    while (stack.size() < n & !elem.isEmpty()) {
      stack.pushBack(elem.get());
      elem = this.tryTake();
    }
    return stack;
  }
}

public abstract type FiniteSource[+T] extends Source[T] {
  # Read all data from this source.
  public Sequence[T] takeAll() {
    MutableStack[T] stack = new DynamicArray[T]();
    Maybe[T] elem = this.tryTake();
    while (!elem.isEmpty()) {
      stack.pushBack(elem.get());
      elem = this.tryTake();
    }
    return stack;
  }
}

public abstract type InfiniteSource[+T] extends Source[T] {
  public T take();

  public Some[T] tryTake() {
    return new Some[T](this.take());
  }
}

type SourceConverter[A, B] extends Source[B] {
  private readonly Source[A] source;
  private readonly Function1[A, B] map;

  public Unit init(Source[A] source, Function1[A, B] map) {
    this.source = source;
    this.map = map;
  }

  public Maybe[B] tryTake() {
    return this.source.tryTake().map[B](this.map);
  }
}

type FiniteSourceConverter[A, B] extends SourceConverter[A, B], FiniteSource[B] {}

type InfiniteSourceConverter[A, B] extends InfiniteSource[B] {
  private readonly InfiniteSource[A] source;
  private readonly Function1[A, B] map;

  public Unit init(InfiniteSource[A] source, Function1[A, B] map) {
    this.source = source;
    this.map = map;
  }

  public B take() {
    return this.map(this.source.take());
  }
}

type SourceFilter[A] extends Source[A] {
  private readonly Source[A] source;
  private readonly Function1[A, Bool] predicate;

  public Unit init(Source[A] source, Function1[A, Bool] predicate) {
    this.source = source;
    this.predicate = predicate;
  }

  public Maybe[A] tryTake() {
    return this.source.tryTake().filter(this.predicate);
  }
}

type FiniteSourceFilter[A] extends SourceFilter[A], FiniteSource[A] {}

# TODO: consider whether to add InfiniteSourceFilter

public sealed type EmptySource extends FiniteSource[Bottom] {
  private static readonly EmptySource singleton;

  private Unit init() {}

  private static Unit init() {
    EmptySource.singleton = new EmptySource();
  }

  public static EmptySource get() {
    return EmptySource.singleton;
  }

  public None tryTake() {
    return None();
  }
}

public sealed type SingletonSource[+T] extends FiniteSource[T] {
  private readonly T value;
  private Bool used;

  public Unit init(T value) {
    this.value = value;
  }

  public Maybe[T] tryTake() {
    if (this.used)
      return None();
    this.used = true;
    return new Some[T](this.value);
  }
}

public sealed type RandomAccessEnumerator[+T] extends FiniteSource[T] {
  private readonly Sequence[T] seq;
  private Int index;

  public Unit init(Sequence[T] seq) {
    this.seq = seq;
    this.index = 0;
  }

  public Maybe[T] tryTake() {
    if (this.index >= this.seq.size())
      return None();
    T result = this.seq(this.index);
    this.index = this.index + 1;
    return new Some[T](result);
  }
}
