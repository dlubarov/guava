module core;

abstract type List[+T] extends Sequence[T] {
  List[T] tail();

  Iterator[T] iterator() {
    return new ListIterator[T](this);
  }
}

type NonEmptyList[+T] extends List[T] {
  T head;
  List[T] rest;
  Int size;

  Void init(T head, List[T] rest) {
    this.head = head;
    this.rest = rest;
    this.size = rest.size() + 1;
  }

  T first() {
    return this.head;
  }

  List[T] tail() {
    return this.rest;
  }

  List[T] last(Int n) {
    if (this.size >= n)
      return this;
    else
      return this.rest.last(n);
  }

  Int size() {
    return this.size;
  }

  Bool isEmpty() {
    return false;
  }
}

type EmptyList[+T] extends List[T] {
  Void init() {}

  List[T] tail() {}

  #Iterator[T] iterator() {
  #  return new EmptyIterator[T]();
  #}

  Int size() {
    return 0;
  }

  Bool isEmpty() {
    return true;
  }
}

type ListIterator[+T] extends Iterator[T] {
  List[T] current;

  Void init(List[T] source) {
    this.current = source;
  }

  Maybe[T] next() {
    if (this.current.isEmpty())
      return new None[T]();
    else {
      T elem = this.current.first();
      this.current = this.current.tail();
      return new Some[T](elem);
    }
  }
}
