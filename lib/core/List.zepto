module core;

abstract type List[+T] extends Sequence[T] {
  static List[U] get[U](Collection[U] source) {
    List[U] result = new EmptyList[U]();
    foreach (U elem in source)
      result = new NonEmptyList[U](elem, result);
    return result.reverse();
  }

  List[T] rest();

  List[T] last(Int n);

  List[T] reverse() {
    List[T] result = new EmptyList[T]();
    foreach (T elem in this)
      result = new NonEmptyList[T](elem, result);
    return result;
  }

  Iterator[T] iterator() {
    return new ListIterator[T](this);
  }
}

type NonEmptyList[+T] extends List[T] {
  T head;
  List[T] tail;
  Int size;

  Void init(T head, List[T] tail) {
    this.head = head;
    this.tail = tail;
    this.size = tail.size() + 1;
  }

  T first() {
    return this.head;
  }

  List[T] rest() {
    return this.tail;
  }

  List[T] last(Int n) {
    if (this.size >= n)
      return this;
    else
      return this.tail.last(n);
  }

  Int size() {
    return this.size;
  }

  Bool isEmpty() {
    return false;
  }
}

type EmptyList[+T] extends List[T] {
  Void init() {}

  List[T] rest() {}

  List[T] last(Int n) {}

  Int size() {
    return 0;
  }

  Bool isEmpty() {
    return true;
  }
}

type ListIterator[+T] extends Iterator[T] {
  List[T] current;

  Void init(List[T] source) {
    this.current = source;
  }

  Maybe[T] next() {
    if (this.current.isEmpty())
      return new None[T]();
    else {
      T elem = this.current.first();
      this.current = this.current.rest();
      return Some[T](elem);
    }
  }
}
