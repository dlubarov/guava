module core;

public sealed type String extends ImmutableSequence[Char] {
  private Array[Char] backingArray;

  public Unit init(Sequence[Char] source) {
    this.backingArray = new Array[Char](source);
  }

  public Char get(Int index) {
    return this.backingArray(index);
  }

  public String +(Top o) {
    String that = o.toString();
    return new String(Sequence.+(this, that));
  }

  public String *(Int k) {
    return new String(this.backingArray * k);
  }

  public String join(Sequence[Top] seq) {
    MutableStack[Char] buffer = new DynamicArray[Char]();
    foreach (Top o in seq) {
      if (!buffer.isEmpty())
        buffer.pushBackAll(this);
      buffer.pushBackAll(o.toString());
    }
    return new String(buffer);
  }

  public String split(Sequence[Char] delim) {
  }

  public String toUpperCase() {
  }

  public String toLowerCase() {
  }

  public String format(Sequence[Top] args) {
    # TODO: implement string formatting
  }

  public Source[Char] enumerator() {
    return this.backingArray.enumerator();
  }

  public String toString() {
    return this;
  }
}

public type ASCIISerializer extends Serializer[Sequence[Char]] {
  public Sequence[Byte] serialize(Sequence[Char] chars) {
    MutableStack[Byte] bytes = new DynamicArray[Byte]();
    foreach (Char c in chars)
      bytes.pushBack(new Byte(c));
    return bytes;
  }

  public String deserialize(Sequence[Byte] bytes) {
    MutableStack[Char] chars = new DynamicArray[Char]();
    foreach (Byte b in bytes)
      chars.pushBack(new Char(b));
    return new String(chars);
  }
}
