module core;

public sealed type String extends Sequence[Char] {
  private MutableArray[Char] backingArray;

  public Unit init(Sequence[Char] source) {
    this.backingArray = new MutableArray[Char](source);
  }

  public Char get(Int index) {
    return this.backingArray(index);
  }

  public String +(Top o) {
    String that = o.toString();
    return new String(Sequence.+(this, that));
  }

  public String *(Int k) {
    return new String(Sequence.*(this, k));
  }

  public String join(Sequence[Top] seq) {
    MutableStack[Char] buffer = new DynamicArray[Char]();
    foreach (Top o in seq) {
      if (!buffer.isEmpty())
        buffer.pushBackAll(this);
      buffer.pushBackAll(o.toString());
    }
    return new String(buffer);
  }

  public String split(Sequence[Char] delim) {
  }

  public String format(Sequence[Top] args) {
    # TODO: implement string formatting
  }

  public Source[Char] enumerator() {
    return this.backingArray.enumerator();
  }

  public String toString() {
    return this;
  }
}
