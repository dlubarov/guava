module core;

public sealed type PossibleRelation {
  public static readonly PossibleRelation NONE;

  private static Unit init() {
    PossibleRelation.NONE = new PossibleRelation();
  }

  private Unit init() {}

  public PossibleRelation flip() {
    return PossibleRelation.NONE;
  }

  public String toString() {
    # TODO: use switch
    if (this == PossibleRelation.NONE)
      return "NONE";
    if (this == Relation.LT)
      return "LT";
    if (this == Relation.GT)
      return "GT";
    if (this == Relation.EQ)
      return "EQ";
  }
}

# Used to enforce trichotomy.
public sealed type Relation extends PossibleRelation {
  public static readonly Relation LT, GT, EQ;

  private static Unit init() {
    Relation.LT = new Relation();
    Relation.GT = new Relation();
    Relation.EQ = new Relation();
  }

  private Unit init() {}

  public Relation flip() {
    if (this == Relation.LT)
      return Relation.GT;
    if (this == Relation.GT)
      return Relation.LT;
    return Relation.EQ;
  }
}

# A partial ordering of T.
public abstract type PartialOrdering[-T] {
  public PossibleRelation compare(T a, T b);
}

# A total ordering of T.
public abstract type Ordering[-T] extends PartialOrdering[T] {
  public Relation compare(T a, T b);
}

# A type which has a natural partial ordering with respect to T.
public abstract type NaturallyPartiallyOrdered[-T] {
  public PossibleRelation compareTo(T that);

  public Bool <(T that) {
    return this.compareTo(that) == Relation.LT;
  }

  public Bool >(T that) {
    return this.compareTo(that) == Relation.GT;
  }

  public Bool ==(Top that) {
    # TODO: switch on that
  }

  public Bool <=(T that) {
    PossibleRelation rel = this.compareTo(that);
    return rel == Relation.LT | rel == Relation.EQ;
  }

  public Bool >=(T that) {
    PossibleRelation rel = this.compareTo(that);
    return rel == Relation.GT | rel == Relation.EQ;
  }
}

# A type which has a natural total ordering with respect to T.
public abstract type NaturallyOrdered[-T] extends NaturallyPartiallyOrdered[T] {
  public Relation compareTo(T that);
}

# The natural partial ordering of a type which has one.
[T < NaturallyPartiallyOrdered[T]]
public sealed type NaturalPartialOrdering[-T] extends PartialOrdering[T] {
  public Unit init() {}

  public PossibleRelation compare(T a, T b) {
    return a.compareTo(b);
  }
}

# The natural total ordering of a type which has one.
[T < NaturallyOrdered[T]]
public sealed type NaturalOrdering[-T] extends Ordering[T] {
  public Unit init() {}

  public Relation compare(T a, T b) {
    return a.compareTo(b);
  }

  public T min(T a, T b) {
    if (b < a)
      return b;
    return a;
  }

  public T max(T a, T b) {
    if (b > a)
      return b;
    return a;
  }
}

# A wrapper around a partial ordering which gives us the opposite.
public type ReversePartialOrdering[-T] extends PartialOrdering[T] {
  private readonly PartialOrdering[T] original;

  public Unit init(PartialOrdering[T] original) {
    this.original = original;
  }

  public PossibleRelation compare(T a, T b) {
    return this.original.compare(a, b).flip();
  }
}

# A wrapper around a total ordering which gives us the opposite.
public type ReverseOrdering[-T] extends Ordering[T] {
  private readonly Ordering[T] original;

  public Unit init(Ordering[T] original) {
    this.original = original;
  }

  public Relation compare(T a, T b) {
    return this.original.compare(a, b).flip();
  }
}

public type LexicographicOrdering[-T] extends Ordering[Sequence[T]] {
  public Relation compare(Sequence[T] a, Sequence[T] b) {
    Source[T] enumA = a.enumerator(), enumB = b.enumerator();
    # TODO: incomplete
  }
}
