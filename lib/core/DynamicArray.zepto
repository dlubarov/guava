module core;

public type DynamicArray[T] extends MutableStack[T] {
  private MutableArray[Maybe[T]] backingArray;
  private Int n;

  public Unit init() {
    this.backingArray = new MutableArray[Maybe[T]]({None()});
  }

  private Unit expand() {
    Sequence[Maybe[T]] nones = {None()} * (backingArray.size() * 2);
    MutableArray[Maybe[T]] newArray = new MutableArray[Maybe[T]](nones);
    for (Int i = 0; i < backingArray.size(); i = i + 1)
      newArray(i) = backingArray(i);
    this.backingArray = newArray;
  }

  private Unit shrink() {
    Int newSize = this.backingArray.size() / 2;
    this.backingArray = this.backingArray.getFront(newSize);
  }

  public Unit pushBack(T value) {
    if (this.n == this.backingArray.size())
      this.expand();
    this.backingArray(this.n) = Some(value);
    this.n = this.n + 1;
  }

  public T popBack() {
    this.n = this.n - 1;
    this.backingArray(n) = None();
    if (small)
      this.shrink();
  }

  public T get(Int i) {
    return this.backingArray(i).get();
  }

  public T set(Int i, T value) {
    this.backingArray(i) = Some(value);
  }
}
