module core;

# A group of elements with a finite size.

public abstract type Collection[+T] extends Enumerable[T] {
  # The number of elements in this collection.
  public Int size() {
    Int n = 0;
    foreach (T x in this)
      n = n + 1;
    return n;
  }

  # Test whether this collection has no elements.
  public Bool isEmpty() {
    return this.size() == 0;
  }

  # Count the number of times some element comes up in this set.
  public Int count(Top elem) {
    Int n = 0;
    foreach (T x in this)
      if (x == elem)
        n = n + 1;
    return n;
  }

  # Count the number of elements satisfying some predicate.
  public Int countSatisfying(Function1[Top, Bool] p) {
    Int n = 0;
    foreach (T x in this)
      if (p(x))
        n = n + 1;
    return n;
  }

  # Test whether this contains a particular element.
  public Bool contains(Top elem) {
    return this.count(elem) > 0;
  }

  # Test whether this contains an element satisfying some predicate.
  public Bool containsSatisfying(Function1[Top, Bool] p) {
    return this.count(p) > 0;
  }

  # Transform each element according to some function, and return the resulting collection.
  public Collection[U] map[U](Function1[T, U] f) {
    MutableStack[U] stack = new DynamicArray[U]();
    foreach (T elem in this)
      stack.pushBack(f(elem));
    return stack;
  }

  # Filter this collection according to some predicate.
  # Only the elements for which p holds will be included in the new collection.
  public Collection[T] filter(Function1[T, Bool] p) {
    MutableStack[T] stack = new DynamicArray[T]();
    foreach (T elem in this)
      if (p(elem))
        stack.pushBack(elem);
    return stack;
  }

  public ImmutableCollection[T] toImmutable() {
    return new ImmutableArray[T](this);
  }
}

# I don't think there's any point to have a MutableCollection type,
# since there aren't any mutating methods which are common to all
# collections. It is a bit funny to not have one when we have
# MutableSequence and ImmutableCollection, though.

public abstract type ImmutableCollection[+T] extends Collection[T] {
  public ImmutableCollection[T] toImmutable() {
    return this;
  }
}
