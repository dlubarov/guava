module core;

# A Set is a collection which contains no duplicate elements.
public abstract type Set[+T] extends Sequence[T] {
  public static readonly Set[Bottom] empty;

  public Unit init(Collection[T] source) {
  }

  # Union.
  [U > T]
  public Set[U] |[U](Set[U] that) {
  }

  # Symmetric difference.
  [U > T]
  public Set[U] ^[U](Set[U] that) {
  }

  # Intersection.
  public Set[T] &(Set[Top] that) {
  }

  # Difference.
  public Set[T] -(Set[Top] that) {
  }

  public Int count(T elem) {
    if (this.contains(elem))
      return 1;
    else
      return 0;
  }

  public Bool ==(Top o) {
  }

  public Int hashCode() {
  }

  public String toString() {
  }
}

public abstract type MutableSet[T] extends Set[T] {
  public Unit +=(T elem);
  public Unit -=(T elem);
}

public abstract type ImmutableSet[+T] extends Set[T] {
  [U > T]
  public ImmutableSet[U] +[U](U elem);

  public ImmutableSet[T] -(T elem);
}
