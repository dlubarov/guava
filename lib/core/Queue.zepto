module core;

public abstract type MutableQueue[T] extends MutableSequence[T] {
  public Unit pushBack(T value);

  public Unit pushBackAll(Sequence[T] values) {
    foreach (T value in values)
      this.pushBack(value);
  }

  public T popFront();
}

public abstract type ImmutableQueue[+T] extends ImmutableSequence[T] {
  [U > T]
  public ImmutableQueue[U] pushBack[U](U value);

  [U > T]
  public ImmutableQueue[U] pushBackAll[U](Sequence[U] values) {
    ImmutableQueue[U] result = this;
    foreach (U value in values)
      result = result.pushBack[U](value);
    return this;
  }

  public ImmutableQueue[T] popFront();
}
