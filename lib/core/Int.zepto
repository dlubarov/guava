module core;

public sealed type Int extends NaturallyOrdered[Int], Sequence[Bool] {
  public Void init(String s, Int radix) {}

  public Void init(String s) {
    this.init(s, 10);
  }

  public Int +() {}
  public Int -() {}
  public Int ~() {}

  public Int +(Int that) {}
  public Int -(Int that) {}

  public Int *(Int that) {}
  public Int /(Int that) {}
  public Int %(Int that) {}

  public Int |(Int that) {}
  public Int ^(Int that) {}
  public Int &(Int that) {}

  public Int <<(Int that) {}
  public Int >>(Int that) {}
  #public Int >>>(Int that) {} # TODO: decide about rshifts

  public Int rotateLeft(Int distance) {}
  public Int rotateRight(Int distance) {}

  public static Int min(Int a, Int b) {}
  public static Int max(Int a, Int b) {}

  public Int signum() {}

  public Int bitCount() {}

  public Int lowestOneBit() {}
  public Int highestOneBit() {}

  public Int numLeadingZeros() {}
  public Int numTrailingZeros() {}

  public Int reverseBits();
  public Int reverseBytes();

  public Bool ==(Top o) {}

  public Int hashCode() {
    return this;
  }

  public String toString(Int radix) {}

  public String toString() {
    return this.toString(10);
  }

  public String toBinaryString() {
    return this.toString(2);
  }

  public String toOctalString() {
    return this.toString(8);
  }

  public String toHexString() {
    return this.toString(16);
  }

  public TotalOrdering[Int] naturalOrdering() {}
}

public type AscendingIntegerOrdering extends TotalOrdering[Int] {
}
