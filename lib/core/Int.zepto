module core;

public sealed type Int extends NaturallyOrdered[Int] {
  public Unit init(String s, Int radix) {}

  public Unit init(String s) {
    this.init(s, 10);
  }

  public Unit init(Byte b) {}

  public Unit init(Char c) {}

  public Int +() {}
  public Int -() {}
  public Int ~() {}

  public Int +(Int that) {}
  public Int -(Int that) {}

  public Int *(Int that) {}
  public Int /(Int that) {}
  public Int %(Int that) {}

  public Int |(Int that) {}
  public Int ^(Int that) {}
  public Int &(Int that) {}

  public Int <<(Int that) {}
  public Int >>(Int that) {}
  public Int >>>(Int that) {}

  public Some[Relation] compareTo(Int that) {}

  public Int rotateLeft(Int distance) {}
  public Int rotateRight(Int distance) {}

  public static Int min(Int a, Int b) {
    if (a < b)
      return a;
    return b;
  }

  public static Int max(Int a, Int b) {
    if (a > b)
      return a;
    return b;
  }

  public Int signum() {
    if (this > 0)
      return 1;
    if (this < 0)
      return -1;
    return 0;
  }

  public Int bitCount() {}

  public Int lowestOneBit() {}
  public Int highestOneBit() {}

  public Int numLeadingZeros() {}
  public Int numTrailingZeros() {}

  public Int reverseBits() {}
  public Int reverseBytes() {}

  public Bool ==(Top o) {}

  public Int hashCode() {
    return this;
  }

  public String toString(Int radix) {}

  public String toString() {
    return this.toString(10);
  }

  public String toBinaryString() {
    return this.toString(2);
  }

  public String toOctalString() {
    return this.toString(8);
  }

  public String toHexString() {
    return this.toString(16);
  }
}

# The sensible encoding for integers. :-)
public type BigEndianIntSerializer extends Serializer[Int] {
  private static readonly BigEndianIntSerializer singleton;

  private Unit init() {}

  private static Unit init() {
    BigEndianIntSerializer.singleton = new BigEndianIntSerializer();
  }

  public static BigEndianIntSerializer get() {
    return BigEndianIntSerializer.singleton;
  }

  public Sequence[Byte] serialize(Int n) {
    MutableDeque[Byte] bytes = new ArrayDeque[Byte](4);
    for (Int i = 0; i < 4; i = i + 1)
      bytes.pushFront(new Byte(n << 8 * i));
    return bytes;
  }

  public Int deserialize(Sequence[Byte] bytes) {
    Int n = 0;
    foreach (Byte b in bytes)
      n = (n << 8) | new Int(b); # TODO: cast shouldn't be needed
    return n;
  }
}

public type LittleEndianIntSerializer extends Serializer[Int] {
  private static readonly LittleEndianIntSerializer singleton;

  private Unit init() {}

  private static Unit init() {
    LittleEndianIntSerializer.singleton = new LittleEndianIntSerializer();
  }

  public static LittleEndianIntSerializer get() {
    return LittleEndianIntSerializer.singleton;
  }

  public Sequence[Byte] serialize(Int n) {
    return BigEndianIntSerializer().serialize(n).reverse();
  }

  public Int deserialize(Sequence[Byte] bytes) {
    return BigEndianIntSerializer().deserialize(bytes.reverse());
  }
}
