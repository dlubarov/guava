module core;

abstract type Map[K, +V] extends Collection[Tuple2[K, V]] {
  Maybe[V] get(K key);

  Collection[K] keys() {
    List[K] result = new EmptyList[K]();
    for (Tuple2[K, V] pair : this)
      result = new NonEmptyList[K](pair.first(), result);
    return result;
  }

  Collection[V] values() {
    List[V] result = new EmptyList[V]();
    for (Tuple2[K, V] pair : this)
      result = new NonEmptyList[V](pair.second(), result);
    return result;
  }
}

abstract type MutableMap[K, V] extends Map[K, V] {
  # Returns the given val, NOT the old val (as Java's Map would)
  V set(K key, V val);
}

abstract type ImmutableMap[K, +V] extends Map[K, V] {
}
