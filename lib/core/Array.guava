module core;

pubilc sealed type Array[T] extends MutableSequence[T] {
  public Unit init() {
    # native code
  }

  public Unit init(Collection[T] source) {
    # native code
  }

  public T get(Int i) {
    # native code
  }

  public T set(Int i, T val) {
    # native code
  }

  public Array[T] getFront(Int k) {
    # TODO: write native version
    return new Array[T](Sequence.getFront(this, k));
  }

  public Array[T] getBack(Int k) {
    # TODO: write native version
    return new Array[T](Sequence.getBack(this, k));
  }

  public Array[T] *(Int k) {
    # native code
  }

  public Int size() {
    # native code
  }

  public Source[T] enumerator() {
    return new RandomAccessEnumerator[T](this);
  }
}

public sealed type ImmutableArray[+T] extends ImmutableSequence[T] {
  public static readonly ImmutableArray[Bottom] empty;

  private readonly Array[T] backingArray;

  private static Unit init() {
    ImmutableArray.empty = new ImmutableArray[Bottom]();
  }

  public Unit init(Collection[T] source) {
    this.backingArray = new Array[T](source);
  }

  public Unit init() {
    this.init(new Array[T]());
  }

  public Int size() {
    return this.backingArray.size();
  }

  public Source[T] enumerator() {
    return new RandomAccessEnumerator[T](this.backingArray);
  }
}
