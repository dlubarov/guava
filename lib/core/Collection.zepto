module core;

type Collection[+T] extends Iterable[T] {
  Int size() {
    Int result = 0;
    for (T elem : this)
      result = result + 1;
    return result;
  }

  Bool isEmpty() {
    return this.size() == 0;
  }

  Bool contains(T elem) {
    return this.count(elem) > 0;
  }

  Int count(T elem) {
    Int result = 0;
    for (T x : this)
      if (x == elem)
        result = result + 1;
    return result;
  }

  Set[T] uniqueElems() {
  }

  Collection[U] map[U](Function1[T, U] f) {
    List[U] result = new EmptyList[U]();
    for (T elem : this)
      result = new NonEmptyList[U](f(elem), result);
    return result;
  }

  Collection[U] map[U](Function1[T, Maybe[U]] f) {
    List[U] result = new EmptyList[U]();
    for (T elem : this)
      if (f(elem).isSomething())
        result = new NonEmptyList[U](f(elem).get(), result);
    return result;
  }

  Collection[T] filter(Function1[T, Bool] p) {
    List[T] result = new EmptyList[T]();
    for (T elem : this)
      if (p(elem))
        result = new NonEmptyList[T](elem, result);
    return result;
  }
}
