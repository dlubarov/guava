module core;

# A group of elements with a finite size.

public abstract type Collection[+T] extends Enumerable[T] {
  public Int size() {
    Int n = 0;
    foreach (T x in this)
      n = n + 1;
    return n;
  }

  public Bool isEmpty() {
    return this.size() == 0;
  }

  public Int count(T elem) {
    Int n = 0;
    foreach (T x in this)
      if (x == elem)
        n = n + 1;
    return n;
  }

  public Int count(Function1[T, Bool] p) {
    Int n = 0;
    foreach (T x in this)
      if (p(x))
        n = n + 1;
    return n;
  }

  public Bool contains(T elem) {
    return this.count(elem) > 0;
  }

  public Bool contains(Function1[T, Bool] p) {
    return this.count(p) > 0;
  }

  public Collection[T] map(Function1[T, T] f) {
  }
}

# TODO: Consider adding MutableCollection and ImmutableCollection.
# Both would have a method called something like toImmutable().
# ImmutableCollection's implementation would return 'this', while
# MutableCollection's (or Collection's?) would make a new ImmutableArray.
