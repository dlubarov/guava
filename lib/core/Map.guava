module core;

public type MapEntry[+K, +V] {
  public readonly K key;
  public readonly V value;

  public Unit init(K key, V value) {
    this.key = key;
    this.value = value;
  }

  public Bool ==(Top o) {
    switch (o) {
      MapEntry[Top, Top] that ->
        return this.key == that.key & this.value == that.value;
      other ->
        return false;
    }
  }

  public Int hashCode() {
    return {this.key, this.value}.hashCode();
  }

  public String toString() {
    return "%s -> %s".format({this.key, this.value});
  }
}

public abstract type Map[K, +V] extends Set[MapEntry[K, V]] {
  public Maybe[V] tryGet(K key);

  public V get(K key) {
    return this.tryGet(key).get();
  }

  public Bool containsKey(K key) {
    return !this.tryGet(key).isEmpty();
  }

  public Bool contains(MapEntry[K, V] entry) {
    switch (this.tryGet(entry.key)) {
      Some[V] value ->
        return entry.value == value;
      None _ ->
        return false;
    }
  }

  public Set[K] getKeys() {
    MutableSet[K] keys = new HashSet[K]();
    foreach (MapEntry[K, V] entry in this)
      keys += entry.key;
    return keys;
  }

  public Set[V] getValues() {
    MutableSet[V] values = new HashSet[V]();
    foreach (MapEntry[K, V] entry in this)
      values += entry.value;
    return values;
  }

  public Map[K2, V] mapKeys[K2](Function1[K, K2] f) {
    # TODO: mapKeys
  }

  public Map[K, V2] mapValues[V2](Function1[V, V2] f) {
    # TODO: mapValues
  }

  public Map[K, V] filterKeys(Function1[K, Bool] f) {
    # TODO: filterKeys
  }

  public Map[K, V] filterValues(Function1[V, Bool] f) {
    # TODO: filterValues
  }

  public ImmutableMap[K, V] toImmutable() {
    # TODO: construct some immutable map
  }

  public String toString() {
    # TODO: Map toString
  }
}

# Does no implement MutableSet[MapEntry[K, V]] because users of that
# type would not expect adding an element to remove a distinct element.

public abstract type MutableMap[K, V] extends Map[K, V] {
  public Unit set(K key, V value);

  public Unit +=(MapEntry[K, V] entry) {
    this(entry.key) = entry.value;
  }

  public Unit -=(K key);
}

# Does no implement ImmutableSet[MapEntry[K, V]] because users of that
# type would not expect adding an element to remove a distinct element.

public abstract type ImmutableMap[K, +V] extends Map[K, V] {
  # TODO: :+
  public ImmutableMap[K, V] +(MapEntry[K, V] entry);

  public ImmutableMap[K, V] -(K key);

  public ImmutableMap[K, V] toImmutable() {
    return this;
  }
}
