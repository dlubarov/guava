module core;

# Used to enforce trichotomy.
public type Relation {
  public static readonly Relation LT, GT, EQ;

  private static Void init() {
    LT = new Relation();
    GT = new Relation();
    EQ = new Relation();
  }

  private Void init() {}
}

public abstract type PartialOrdering[-T] {
  public Maybe[Relation] compare(T a, T b);
}

public type ReversePartialOrdering[-T] extends PartialOrdering[T] {
  # TODO: implement
}

public abstract type TotalOrdering[-T] extends PartialOrdering[T] {
  public Some[Relation] compare(T a, T b);
}

public type ReverseOrdering[-T] extends TotalOrdering[T] {
  # TODO: implement
}

public type LexicographicPartialOrdering[-T] extends PartialOrdering[Squence[T]] {
}

public type LexicographicTotalOrdering[-T] extends TotalOrdering[Sequence[T]] {
  public Some[Relation] compare(Sequence[T] a, Sequence[T] b) {
    Source[T] enumA = a.enumerator(), enumB = b.enumerator();
  }
}
