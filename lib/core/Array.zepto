module core;

abstract type Array[+T] extends Sequence[T] {
  Iterator[T] iterator() {
    return new ArrayIterator[T](this);
  }
}

type MutableArray[T] extends Array[T] {
  Void init(Collection[T] source) {}

  T get(Int idx) {}

  T set(Int idx, T val) {}

  Int size() {}
}

type ImmutableArray[+T] extends Array[T] {
  MutableArray[T] store;

  Void init(Collection[T] source) {
    this.store = new MutableArray[T](source);
  }

  T get(Int idx) {
    return this.store(idx);
  }
}

type ArrayIterator[+T] extends Iterator[T] {
  Array[T] source;
  Int index;

  Void init(Array[T] source) {
    this.source = source;
    this.index = 0;
  }

  Maybe[T] next() {
    if (this.index >= this.source.size())
      return new None[T]();
    T result = this.source(this.index);
    this.index = this.index + 1;
    return new Some[T](result);
  }
}
