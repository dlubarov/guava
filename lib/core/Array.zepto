module core;

type MutableArray[T] extends Sequence[T] {
  Void init() {
    # native code
  }

  Void init(Collection[T] source) {
    # native code
  }

  T get(Int i) {
    # native code
  }

  T set(Int i, T val) {
    # native code
  }

  Int size() {
    # native code
  }

  Source[T] iterator() {
    return new RandomAccessIterator[T](this);
  }
}

type ImmutableArray[+T] extends Sequence[T] {
  static ImmutableArray[Bottom] empty;

  static Void init() {
    ImmutableArray.empty = new ImmutableArray[Bottom]();
  }

  MutableArray backingArray;

  Void init(Collection[T] source) {
    this.backingArray = new MutableArray[T](source);
  }

  Void init() {
    this.init(new MutableArray[T]());
  }

  Source[T] iterator() {
    return new RandomAccessIterator[T](this);
  }
}
