module core;

abstract type Function0[+R] {
  R get();
}

abstract type Function1[-T1, +R] {
  R get(T1 v1);
}

abstract type Function2[-T1, -T2, +R] {
  R get(T1 v1, T2 v2);
}

type ConstantFunction0[+R] extends Function0[R] {
  R value;

  Void init(R value) {
    this.value = value;
  }

  R get() {
    return this.value;
  }
}

type ConstantFunction1[-T1, +R] extends Function1[T1, R] {
  R value;

  Void init(R value) {
    this.value = value;
  }

  R get(T1 v1) {
    return this.value;
  }
}

type ConstantFunction2[-T1, -T2, +R] extends Function2[T1, T2, R] {
  R value;

  Void init(R value) {
    this.value = value;
  }

  R get(T1 v1, T2 v2) {
    return this.value;
  }
}

type IdentityFunction[T] extends Function1[T, T] {
  Void init() {}

  T get(T v) {
    return v;
  }
}
