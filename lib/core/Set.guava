module core;

# A Set is a collection which contains no duplicate elements.
public abstract type Set[+T] extends Sequence[T] {
  # Union.
  [U > T]
  public Set[U] |[U](Set[U] that) {
  }

  # Symmetric difference.
  [U > T]
  public Set[U] ^[U](Set[U] that) {
  }

  # Intersection.
  public Set[T] &(Set[Top] that) {
  }

  # Difference.
  public Set[T] -(Set[Top] that) {
  }

  public Int count(T value) {
    if (this.contains(value))
      return 1;
    else
      return 0;
  }

  public Bool ==(Top o) {
  }

  public Int hashCode() {
  }

  public String toString() {
  }
}

public abstract type MutableSet[T] extends Set[T] {
  # Add some object to the set. If the object is already contained
  # in the set, this method succeeds but has no effect.
  public Unit +=(T value);

  # Remove some object from the set. If it wasn't in the set to begin
  # with, this method succeeds but has no effect.
  public Unit -=(T value);
}

public abstract type ImmutableSet[+T] extends Set[T] {
  public static readonly ImmutableSet[Bottom] empty;

  # TODO: set empty

  # TODO: use :+

  [U > T]
  public ImmutableSet[U] +[U](U value);

  public ImmutableSet[T] +(T value) {
    return this.+[T](value);
  }

  public ImmutableSet[T] -(T value);
}
