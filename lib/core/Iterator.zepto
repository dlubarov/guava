module core;

abstract type Iterator[+T] {
  Maybe[T] next();
}

type EmptyIterator[+T] extends Iterator[T] {
  Void init() {}

  Maybe[T] next() {
    return new None[T]();
  }
}

type SingletonIterator[+T] extends Iterator[T] {
  T value;
  Bool used;

  Void init(T value) {
    this.value = value;
  }

  Maybe[T] next() {
    if (this.used)
      new None[T]();
    else {
      this.used = true;
      return new Some[T](this.value);
    }
  }
}
