module core;

public abstract type Maybe[+T] extends ImmutableCollection[T] {
  public T get();

  [U > T]
  public U getOr[U](U default);

  public Maybe[U] map[U](Function1[T, U] f);

  public Maybe[T] filter(Function1[T, Bool] p);
}

public sealed type Some[+T] extends Maybe[T] {
  public readonly T value;

  public Unit init(T value) {
    this.value = value;
  }

  public T get() {
    return this.value;
  }

  [U > T]
  public U getOr[U](U default) {
    return this.value;
  }

  public Some[U] map[U](Function1[T, U] f) {
    return new Some[U](f(this.value));
  }

  public Maybe[T] filter(Function1[T, Bool] p) {
    if (p(this.value))
      return this;
    return None();
  }

  public Int size() {
    return 1;
  }

  public FiniteSource[T] enumerator() {
    return new SingletonSource[T](this.value);
  }

  public Bool ==(Top o) {
    switch (o) {
      Some[Top] that ->
        return this.value == that.value;
      other ->
        return false;
    }
  }

  public Int hashCode() {
    return this.value.hashCode();
  }

  public String toString() {
    return "Some(%s)".format({this.value});
  }
}

public sealed type None extends Maybe[Bottom] {
  private static readonly None singleton;

  private Unit init() {}

  private static Unit init() {
    None.singleton = new None();
  }

  public static None get() {
    return None.singleton;
  }

  public Bottom get() {
    1 / 0; # fail
  }

  [U > Bottom]
  public U getOr[U](U default) {
    return default;
  }

  public None map[U](Function1[Bottom, U] f) {
    return this;
  }

  public None filter(Function1[Bottom, Bool] p) {
    return this;
  }

  public Int size() {
    return 0;
  }

  public FiniteSource[Bottom] enumerator() {
    return EmptySource();
  }

  public String toString() {
    return "None";
  }
}
