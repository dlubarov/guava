module math;

# A basic quantity, that is, a quantity of some basic unit.
# For example, 2 days and 5 meters are basic quantities.

[D < BasicDimension]
public sealed type Quantity[D] extends NaturallyOrdered[Quantity[D]] {
  public readonly Double amount;
  public readonly BasicUnit[D] unit;

  public Unit init(Double amount, BasicUnit[D] unit) {
    this.amount = amount;
    this.unit = unit;
  }

  public Quantity[D] in(BasicUnit[D] newUnit) {
    Double conv = this.unit.ratioTo(newUnit);
    return new Quantity[D](this.amount * conv, newUnit);
  }

  public Quantity[D] +() {
    return this;
  }

  public Quantity[D] -() {
    return this * -1.0;
  }

  public Quantity[D] +(Quantity[D] that) {
    Double totalAmount = this.amount + that.in(this.unit).amount;
    return new Quantity[D](totalAmount, this.unit);
  }

  public Quantity[D] -(Quantity[D] that) {
    return this + -that;
  }

  public Quantity[D] *(Double s) {
    return new Quantity[D](this.amount * s, this.unit);
  }

  public Quantity[D] /(Double d) {
    return new Quantity[D](this.amount / d, this.unit);
  }

  public Quantity[D] %(Double d) {
    return new Quantity[D](this.amount % d, this.unit);
  }

  public Relation compareTo(Quantity[D] that) {
    return this.amount.compareTo(that.in(this.unit).amount);
  }

  public Quantity[D] min(Quantity[D] that) {
    return new NaturalOrdering[Quantity[D]]().min(this, that);
  }

  public Quantity[D] max(Quantity[D] that) {
    return new NaturalOrdering[Quantity[D]]().max(this, that);
  }

  public Bool ==(Top o) {
    switch (o) {
      Quantity[D] that ->
        return this.amount == that.in(this.unit).amount;
      other ->
        return false;
    }
  }

  public Int hashCode() {
    return {this.amount, this.unit}.hashCode();
  }

  public String toString() {
    String s = this.amount.toString() + " " + this.unit;
    if (this.amount != 1.0)
      s = s + "s";
    return s;
  }
}

# A general quantity can have arbitrary units, as in 4 meters/second^2.
# A basic quantity like 2 hours can also be expressed as a general quantity,
# although if you know you are dealing with a basic quantity, it is better
# to use the Quantity type for simplicity, speed and type safety.

public sealed type GeneralQuantity {
  public readonly Double amount;
  public readonly CompoundUnit units;

  public Unit init(Double amount, CompoundUnit units) {
    this.amount = amount;
    this.units = units;
  }

  public GeneralQuantity *(GeneralQuantity that) {
    return new GeneralQuantity(this.amount * that.amount, this.units * that.units);
  }

  public GeneralQuantity /(GeneralQuantity that) {
    return new GeneralQuantity(this.amount / that.amount, this.units / that.units);
  }

  # TODO: GeneralQuantity +, -, ==, hashCode, toString
}
