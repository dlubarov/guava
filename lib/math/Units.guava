module math;

# Represents a basic unit, such as seconds, minutes, or meters.

[D < BasicDimension]
public abstract type BasicUnit[D] {
  public readonly String name;
  public readonly BasicDimension dimension;

  private Unit init(String name, BasicDimension dimension) {
    this.name = name;
    this.dimension = dimension;
  }

  Double ratioToCanonicalUnit();

  public Double ratioTo(BasicUnit[D] that) {
    return this.ratioToCanonicalUnit() / that.ratioToCanonicalUnit();
  }

  public String toString() {
    return this.name;
  }
}

[D < BasicDimension]
sealed type CanonicalBasicUnit[D] extends BasicUnit[D] {
  public Unit init(String name, BasicDimension dimension) {
    BasicUnit.init(this, name, dimension);
  }

  Double ratioToCanonicalUnit() {
    return 1.0;
  }
}

[D < BasicDimension]
sealed type DerivedBasicUnit[D] extends BasicUnit[D] {
  private readonly BasicUnit[D] parent;
  private readonly Double ratio;

  public Unit init(String name, Double ratio, BasicUnit[D] parent) {
    BasicUnit.init(this, name, parent.dimension);
    this.ratio = ratio;
    this.parent = parent;
  }

  Double ratioToCanonicalUnit() {
    return this.ratio * this.parent.ratioToCanonicalUnit();
  }
}

public sealed type CompoundUnit {
  private readonly Map[BasicUnit[BasicDimension], Int] parts;

  public Unit init(Map[BasicUnit[BasicDimension], Int] parts) {
    # TODO: needs Function wrappers
    #this.parts = parts.filterValues(0.!=).toImmutable();
  }

  public CompoundUnit reciprocal() {
    # TODO: needs lambdas
    #return new CompoundUnit(this.parts.mapValues((e) => { return -e; }));
  }

  public CompoundUnit *(CompoundUnit that) {
    MutableMap[BasicUnit[BasicDimension], Int] newParts = new HashMap[BasicUnit[BasicDimension], Int](this.parts);
    foreach (MapEntry[BasicUnit[BasicDimension], Int] entry in that.parts)
      if (newParts.containsKey(entry.key))
        newParts(entry.key) = newParts(entry.key) + entry.value;
      else
        newParts(entry.key) = entry.value;
    return new CompoundUnit(newParts);
  }

  public CompoundUnit /(CompoundUnit that) {
    return this * that.reciprocal();
  }

  public Bool ==(Top o) {
    # TODO: CompoundUnit ==
  }

  public Int hashCode() {
    # TODO: CompoundUnit hashCode
  }

  public String toString() {
    # TODO: CompoundUnit toString
  }
}
