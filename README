  ____                        
 / ___|_   _  __ ___   ____ _ 
| |  _| | | |/ _` \ \ / / _` |
| |_| | |_| | (_| |\ V / (_| |
 \____|\__,_|\__,_| \_/ \__,_|

Guava is a modern OOP language with a powerful, expressive type system.

Guava has native types, but no primitive types. For example, a Char object is
implemented as a native type for efficiency. But unlike a Java char, Char has
methods, inherits from object, and can be used as a generic argument.

Guava also has array types, but to the programmer, they look no different from
any other types. Although MutableArray is a native type, it fits nicely into the
type hierarchy: it extends Array, which extends Sequence, which extends
Collection, etc.

As in Scala, Guava lets you specify the variance of generic parameters. So an
Array[Char] is also an Array[Object], and an Ordering[Sequence] is also an
Ordering[Array].

Guava supports operator overloading. The expression "x + y" is just syntactic
sugar for "x.+(y)". Types can also overload the subscript operator by
implementing "get" and/or "set" methods. For example, the type MutableArray[T]
contains methods which look like this:
  T get(Int idx);
  T set(Int idx, T val);

You can even implement static get and set methods to make a type name behave
like a map. This is useful for writing pseudoconstructors which, unlike real
constructors, may perform interning.

Instance methods can be invoked statically. "Object.==(a, b)" will always
perform an identity comparison, whether or not a's type implements its own "=="
method.

Guava has no null references. Instead, it has a Maybe type similar to Haskell's
Maybe or Scala's Option.

Guava's standard library embraces inheritance in a major way. For example, the MutableDeque type extends MutbleStack and MutableQueue. If you write a function which reverses a MutableStack, you can feed it an ArrayDeque, a DynamicArray, a MutableSinglyLinkedList, etc. Guava's powerful type system and careful API design allow these relationships to be expressed, while strictly adhering to substitutability.


##############
## BUILDING ##
##############

Building and running Guava is easy. If you have bash 4+, you can just do the following.

  git clone git@github.com:dlubarov/guava.git
  cd guava
  mkdir bin
  shopt -s globstar
  javac -d bin src/**/*.java
  ./run

Since Guava has on dependencies or generated code, it is also trivial to build it using any Java IDE.
